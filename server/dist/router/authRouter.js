"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authController_1 = __importDefault(require("../controllers/authController"));
const validate_1 = require("../validation/validate");
const schemas_1 = require("../validation/schemas");
const catchAsync_1 = __importDefault(require("../utilities/catchAsync"));
const middlewares_1 = require("../middlewares");
const router = express_1.default.Router();
router.get("/userVerification", authController_1.default.authenticationCheck);
router.get("/logout", authController_1.default.logout);
router.post("/verify-captcha", authController_1.default.verifyRecaptcha);
router.post("/login", middlewares_1.checkCSRFToken, (0, validate_1.validate)(schemas_1.loginSchema), (0, catchAsync_1.default)(authController_1.default.login));
router.post("/register", middlewares_1.checkCSRFToken, (0, validate_1.validate)(schemas_1.registerSchema), (0, catchAsync_1.default)(authController_1.default.register));
router.get("/email-confirm", (0, validate_1.validate)(schemas_1.confirmEmailSchema, "query"), (0, catchAsync_1.default)(authController_1.default.emailConfirmation));
router.post("/forgot-password", (0, validate_1.validate)(schemas_1.emailSchema), (0, catchAsync_1.default)(authController_1.default.handleForgotPassword));
router.patch("/reset-password/:id/:token", middlewares_1.checkCSRFToken, (0, validate_1.validate)(schemas_1.passwordSchema), (0, catchAsync_1.default)(authController_1.default.resetPassword));
exports.default = router;
